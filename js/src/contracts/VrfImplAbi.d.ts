/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type B512Input = { bytes: [any, any] };

export type B512Output = { bytes: [any, any] };

export type FulfillersKeysInput = {
  key1: AddressInput;
  key2: AddressInput;
  key3: AddressInput;
  key4: AddressInput;
  key5: AddressInput;
  key6: AddressInput;
  key7: AddressInput;
};

export type FulfillersKeysOutput = {
  key1: AddressOutput;
  key2: AddressOutput;
  key3: AddressOutput;
  key4: AddressOutput;
  key5: AddressOutput;
  key6: AddressOutput;
  key7: AddressOutput;
};

export type UnfulfilledInput = {
  randomness: B512Input;
  keys: FulfillersKeysInput;
};

export type UnfulfilledOutput = {
  randomness: B512Output;
  keys: FulfillersKeysOutput;
};

export type FulfilledInput = {
  randomness: B512Input;
  keys: FulfillersKeysInput;
};

export type FulfilledOutput = {
  randomness: B512Output;
  keys: FulfillersKeysOutput;
};

export type RandomnessInput = { seed: string; state: RandomnessStateInput };

export type RandomnessOutput = { seed: string; state: RandomnessStateOutput };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type OptionalAddressInput = Option<AddressInput>;

export type OptionalAddressOutput = Option<AddressOutput>;

export type RandomnessStateInput = Enum<{
  Unfulfilled: UnfulfilledInput;
  Fulfilled: FulfilledInput;
}>;

export type RandomnessStateOutput = Enum<{
  Unfulfilled: UnfulfilledOutput;
  Fulfilled: FulfilledOutput;
}>;

export type OptionalRandomnessInput = Option<RandomnessInput>;

export type OptionalRandomnessOutput = Option<RandomnessOutput>;

interface VrfImplAbiInterface extends Interface {
  functions: {
    get_authority: FunctionFragment;
    get_balance: FunctionFragment;
    get_fee: FunctionFragment;
    get_asset: FunctionFragment;
    get_fulfillment_authorities: FunctionFragment;
    get_num_requests: FunctionFragment;
    get_request_by_seed: FunctionFragment;
    get_request_by_num: FunctionFragment;
    get_requests: FunctionFragment;
    configure_asset: FunctionFragment;
    configure: FunctionFragment;
    request: FunctionFragment;
    withdraw_fees: FunctionFragment;
    fulfill: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "get_authority",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_balance",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_fee",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_asset",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_fulfillment_authorities",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_num_requests",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_request_by_seed",
    values: [string]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_request_by_num",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_requests",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "configure_asset",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "configure",
    values: [
      IdentityInput,
      BigNumberish,
      [any, any, any, any, any, any, any, any, any, any]
    ]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "request", values: [string]): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw_fees",
    values: [ContractIdInput, BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [string, B512Input]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "get_authority",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_fee",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_asset",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_fulfillment_authorities",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_num_requests",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_request_by_seed",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_request_by_num",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_requests",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "configure_asset",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "configure",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "request",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw_fees",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "fulfill",
    data: BytesLike
  ): DecodedValue;
}

export class VrfImplAbi extends Contract {
  interface: VrfImplAbiInterface;
  functions: {
    get_authority: InvokeFunction<[], IdentityOutput>;

    get_balance: InvokeFunction<[asset: ContractIdInput], BN>;

    get_fee: InvokeFunction<[asset: ContractIdInput], BN>;

    get_asset: InvokeFunction<[], ContractIdOutput>;

    get_fulfillment_authorities: InvokeFunction<
      [],
      [any, any, any, any, any, any, any, any, any, any]
    >;

    get_num_requests: InvokeFunction<[], BN>;

    get_request_by_seed: InvokeFunction<
      [seed: string],
      OptionalRandomnessOutput
    >;

    get_request_by_num: InvokeFunction<
      [num: BigNumberish],
      OptionalRandomnessOutput
    >;

    get_requests: InvokeFunction<
      [offset: BigNumberish],
      [
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any,
        any
      ]
    >;

    configure_asset: InvokeFunction<
      [asset: ContractIdInput, fee: BigNumberish],
      void
    >;

    configure: InvokeFunction<
      [
        authority: IdentityInput,
        fee: BigNumberish,
        fulfillment_authorities: [
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any,
          any
        ]
      ],
      void
    >;

    request: InvokeFunction<[seed: string], BN>;

    withdraw_fees: InvokeFunction<
      [
        asset: ContractIdInput,
        amount: BigNumberish,
        recipient_address: AddressInput
      ],
      void
    >;

    fulfill: InvokeFunction<[seed: string, signature: B512Input], void>;
  };
}
